package pectin.classtags.internal;

import static com.google.common.base.Objects.firstNonNull;
import static com.google.common.collect.Sets.intersection;

import java.util.Collections;
import java.util.Set;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;

/**
 * generated by scanning @ClassTags;
 */
class TestedClassSets {
    
    private TestedClassSets() {
    }
    
    private final ImmutableMap<String, Set<Class<?>>> tags2Classes = ImmutableMap.<String, Set<Class<?>>>builder()
            .put("tag", ImmutableSet.<Class<?>>builder()
                    .add(Object.class)
                    .add(Integer.class)
                    .build())
            .put("tag", ImmutableSet.<Class<?>>builder()
                    .add(Object.class)
                    .add(Integer.class)
                    .build())
            .build();
    
    public  Set<Class<?>> getClassesByTag(String tag) {
        return firstNonNull(tags2Classes.get(tag), Collections.<Class<?>>emptySet());
    }
    
    public  Set<Class<?>> getClassesByTags(Iterable<String> tags) {
        Set<Class<?>> result = null;
        for(String tag: tags) {
            final Set<Class<?>> cur = getClassesByTag(tag);
            result = result == null ? cur : intersection(result, cur);
        }
        return firstNonNull(result, Collections.<Class<?>>emptySet());
    }
}
