package pectin.classtags.codegen;

import static com.google.common.base.Objects.firstNonNull;
import static com.google.common.collect.Sets.intersection;

import java.util.Collections;
import java.util.Set;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import pectin.classtags.ClassSetResolver;

/**
 * generated by scanning @ClassTags;
 */
public class ClassSetResolverImpl implements ClassSetResolver {
    
    
    private final ImmutableMap<String, Set<Class<?>>> tags2Classes = ImmutableMap.<String, Set<Class<?>>>builder()
     		{{#tags}}
            .put("{{tag}}", ImmutableSet.<Class<?>>builder()
            	{{#klasses}}
                    .add({{.}}.class)
                {{/klasses}}   
                    .build())
            {{/tags}}
            .build();
    
    public Set<Class<?>> getClassesByTag(String tag) {
        return firstNonNull(tags2Classes.get(tag), Collections.<Class<?>>emptySet());
    }
    
    public Set<Class<?>> getClassesByTags(Iterable<String> tags) {
        Set<Class<?>> result = null;
        for(String tag: tags) {
            final Set<Class<?>> cur = getClassesByTag(tag);
            result = result == null ? cur : intersection(result, cur);
        }
        return firstNonNull(result, Collections.<Class<?>>emptySet());
    }
}